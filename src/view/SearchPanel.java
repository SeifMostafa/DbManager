/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.Dimension;
import java.util.ArrayList;
import javax.swing.JCheckBox;
import javax.swing.border.EmptyBorder;
import model.DbTable;

/**
 * search panel GUI
 *
 * @author dotnet2
 */
public class SearchPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;
    ArrayList<DbTable> mTables;
    String[] table_names;
    private DbTable otherTablesAppended;
    // required for data op exe
    private ArrayList<colPanel> colPanels;
    private ArrayList<JCheckBox> checkBox_col2get;

    private String[][] result_data = new String[0][0];
    private String[] result_table_cols = new String[0];

    private DbTable selectedTable;

    /**
     *
     * @return selected table
     */
    public DbTable getSelectedTable() {
        return selectedTable;
    }

    /**
     *
     * @param selectedTable to set selected table
     */
    public void setSelectedTable(DbTable selectedTable) {
        this.selectedTable = selectedTable;
    }

    /**
     * Creates new form searchPanel
     *
     * @param tables to be shown as available tables
     */
    public SearchPanel(ArrayList<DbTable> tables) {
        this.mTables = tables;
        int catalog_item_most_common_index = 0;
        table_names = new String[mTables.size()];
        for (int i = 0; i < mTables.size(); i++) {
            table_names[i] = mTables.get(i).getName();
            if (mTables.get(i).getName().equals("CATALOG_ITEM")) {
                catalog_item_most_common_index = i;
            }
        }

        initComponents();
        this.setAutoscrolls(true);

        this.setPreferredSize(
                new Dimension(getToolkit().getScreenSize().width - 100, getToolkit().getScreenSize().height - 200));

        jComboBox_table_names.setSelectedIndex(catalog_item_most_common_index);

    }

    /**
     *
     * @return colPanels
     */
    public ArrayList<colPanel> getColPanels() {
        return colPanels;
    }

    /**
     *
     * @return check boxes to indicate which cols. to select
     */
    public ArrayList<JCheckBox> getCheckBox_col2get() {
        return checkBox_col2get;
    }

    /**
     *
     * @param colPanels to be set as columns panels
     */
    public void setColPanels(ArrayList<colPanel> colPanels) {
        this.colPanels = colPanels;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup_cond_union = new javax.swing.ButtonGroup();
        jLabel_table_name = new javax.swing.JLabel();
        jComboBox_table_names = new javax.swing.JComboBox<>();
        jPanel_colsetup = new javax.swing.JPanel();
        jLabel_where = new javax.swing.JLabel();
        jLabel_get = new javax.swing.JLabel();
        jLabel_cond_union = new javax.swing.JLabel();
        jRadioButton_or = new javax.swing.JRadioButton();
        jRadioButton_and = new javax.swing.JRadioButton();
        jPanel_mainPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel_where_cols = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel_getCols = new javax.swing.JPanel();

        buttonGroup_cond_union.add(jRadioButton_or);
        buttonGroup_cond_union.add(jRadioButton_and);

        jLabel_table_name.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel_table_name.setText("table name");

        jComboBox_table_names.setModel(new javax.swing.DefaultComboBoxModel<>(table_names));
        jComboBox_table_names.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_table_namesActionPerformed(evt);
            }
        });

        jLabel_where.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel_where.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_where.setText("Where");
        jLabel_where.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));

        jLabel_get.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel_get.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_get.setText("GET");
        jLabel_get.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));

        jLabel_cond_union.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel_cond_union.setText("Condition uniuon:");

        jRadioButton_or.setText("OR");

        jRadioButton_and.setText("AND");

        jPanel_mainPanel.setBorder(new javax.swing.border.MatteBorder(null));
        jPanel_mainPanel.setLayout(new java.awt.GridLayout(1, 0));

        jPanel_where_cols.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jPanel_where_cols.setAutoscrolls(true);
        jPanel_where_cols.setLayout(new javax.swing.BoxLayout(jPanel_where_cols, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane2.setViewportView(jPanel_where_cols);

        jPanel_mainPanel.add(jScrollPane2);

        jPanel_getCols.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel_getCols.setLayout(new javax.swing.BoxLayout(jPanel_getCols, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane1.setViewportView(jPanel_getCols);

        jPanel_mainPanel.add(jScrollPane1);

        buttonGroup_cond_union.add(jRadioButton_and);
        buttonGroup_cond_union.add(jRadioButton_or);
        jRadioButton_or.setSelected(true);

        javax.swing.GroupLayout jPanel_colsetupLayout = new javax.swing.GroupLayout(jPanel_colsetup);
        jPanel_colsetup.setLayout(jPanel_colsetupLayout);
        jPanel_colsetupLayout.setHorizontalGroup(
            jPanel_colsetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_colsetupLayout.createSequentialGroup()
                .addGap(159, 159, 159)
                .addGroup(jPanel_colsetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel_mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel_colsetupLayout.createSequentialGroup()
                        .addGroup(jPanel_colsetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel_colsetupLayout.createSequentialGroup()
                                .addComponent(jLabel_where)
                                .addGap(187, 187, 187)
                                .addComponent(jLabel_get, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel_colsetupLayout.createSequentialGroup()
                                .addComponent(jLabel_cond_union)
                                .addGap(22, 22, 22)
                                .addComponent(jRadioButton_or)
                                .addGap(10, 10, 10)
                                .addComponent(jRadioButton_and)))
                        .addGap(209, 209, 209)))
                .addContainerGap())
        );
        jPanel_colsetupLayout.setVerticalGroup(
            jPanel_colsetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_colsetupLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_colsetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_where)
                    .addComponent(jLabel_get, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel_mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_colsetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_cond_union)
                    .addComponent(jRadioButton_or)
                    .addComponent(jRadioButton_and))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jLabel_table_name)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox_table_names, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel_colsetup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_table_name)
                    .addComponent(jComboBox_table_names, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel_colsetup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(16, 16, 16))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox_table_namesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_table_namesActionPerformed
        if (!jLabel_get.isVisible()) {
            jLabel_get.setVisible(true);
        }

        for (int i = 0; i < mTables.size(); i++) {
            if (mTables.get(i).getName()
                    .equals(((String) jComboBox_table_names.getSelectedItem()))) {
                setSelectedTable(mTables.get(i));
                colSetup();
                // System.out.println("setup completed");

            }
        }    }//GEN-LAST:event_jComboBox_table_namesActionPerformed
    /**
     * depending on chosen table , draw cols
     */
    private void colSetup() {

        jPanel_where_cols.removeAll();
        jPanel_getCols.removeAll();

        colPanels = new ArrayList<>();
        checkBox_col2get = new ArrayList<>();

        JCheckBox boxALL = new JCheckBox(Messages.getString("SearchPanel.all")); //$NON-NLS-1$
        boxALL.setBorder(new EmptyBorder(10, 10, 10, 10));
        checkBox_col2get.add(boxALL);
        jPanel_getCols.add(boxALL);

        for (int i = 0; i < selectedTable.getCols().size(); i++) {
            colPanel colPanel = new colPanel(selectedTable.getCols().get(i).getName());
            colPanels.add(colPanel);
            jPanel_where_cols.add(colPanel);
            JCheckBox box = new JCheckBox(selectedTable.getCols().get(i).getName());
            box.setBorder(new EmptyBorder(10, 10, 10, 10));

            checkBox_col2get.add(box);
            jPanel_getCols.add(box);
        }

        jPanel_where_cols.setAutoscrolls(true);
        jPanel_getCols.setAutoscrolls(true);

        revalidate();
        repaint();
    }

    /*
	 * draw and add jTable
     */
    /**
     *
     */
    @SuppressWarnings("deprecation")
    public void drawResult() {

        SearchResultJDialog dialog = new SearchResultJDialog(result_data, result_table_cols);
        dialog.setLocation(200, 200);
        dialog.show();
    }

    /**
     *
     * @param TableAppendedName
     * @param exists
     */
    public void appendTableAsSearchInOthers(String TableAppendedName, Boolean[] exists) {
        // prepare rows
        String[][] tempResultData_rows = new String[result_data.length][result_data[0].length + 1];
        for (int i = 0; i < result_data.length; i++) {
            System.arraycopy(result_data[i], 0, tempResultData_rows[i], 0, result_data[i].length);
        }

        // prepare cols
        String[] tempCols = new String[result_table_cols.length + 1];
        System.arraycopy(result_table_cols, 0, tempCols, 0, result_table_cols.length);

        tempCols[result_table_cols.length] = TableAppendedName;
        if (exists.length > 0) {
            for (int k = 0; k < exists.length; k++) {
                tempResultData_rows[k][result_table_cols.length] = String.valueOf(exists[k]);
            }
        } else {
            for (int k = 0; k < result_data.length; k++) {
                tempResultData_rows[k][result_table_cols.length] = String.valueOf(false);
            }
            //tempResultData_rows[0][result_table_cols.length] = String.valueOf(false);
        }
        result_data = tempResultData_rows;
        result_table_cols = tempCols;

        this.revalidate();
        this.repaint();

    }

    /**
     *
     * @return
     */
    public String[][] getResult_data() {
        return result_data;
    }

    /**
     *
     * @param result_data
     */
    public void setResult_data(String[][] result_data) {
        this.result_data = result_data;
    }

    /**
     *
     * @return
     */
    public String[] getResult_table_cols() {
        return result_table_cols;
    }

    /**
     *
     * @param result_table_cols
     */
    public void setResult_table_cols(String[] result_table_cols) {
        this.result_table_cols = result_table_cols;
    }

     /**
     *
     * @return String to specify if logic operator between where conditions is "or" or "and"
     */
    public DbTable getOtherTablesAppended() {
        return otherTablesAppended;
    }

    /**
     *
     * @param dbTable
     */
    public void setOtherTablesAppended(DbTable dbTable) {
        this.otherTablesAppended = dbTable;
    }

    /**
     *
     * @return
     */
    public String getCond_where_multiple_cols() {
        if (jRadioButton_or.isSelected()) {
            return Messages.getString("SearchPanel.or"); //$NON-NLS-1$ //$NON-NLS-2$
        } else if (jRadioButton_and.isSelected()) {
            return Messages.getString("SearchPanel.and"); //$NON-NLS-1$
        } else {
            return Messages.getString("SearchPanel.or"); //$NON-NLS-1$ //$NON-NLS-2$
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup_cond_union;
    private javax.swing.JComboBox<String> jComboBox_table_names;
    private javax.swing.JLabel jLabel_cond_union;
    private javax.swing.JLabel jLabel_get;
    private javax.swing.JLabel jLabel_table_name;
    private javax.swing.JLabel jLabel_where;
    private javax.swing.JPanel jPanel_colsetup;
    private javax.swing.JPanel jPanel_getCols;
    private javax.swing.JPanel jPanel_mainPanel;
    private javax.swing.JPanel jPanel_where_cols;
    private javax.swing.JRadioButton jRadioButton_and;
    private javax.swing.JRadioButton jRadioButton_or;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
