/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dbmanager;

import control.AuthManager;
import control.StorageManager;
import control.Utils;
import dbmanager.Controller.ref;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.AbstractMap.SimpleEntry;
import java.util.ArrayList;
import java.util.Collections;
import java.util.concurrent.Semaphore;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.border.EmptyBorder;
import model.DbConfigs;
import model.DbTable;
import model.DbTable.dbCol;
import model.User.PERMISSION;
import view.DeletePanel;
import view.InsertPanel;
import view.SearchPanel;
import view.UpdatePanel;
import view.addUserJFrame;
import view.chooseRecordJDialog;
import view.colPanel;
import view.deleteUserJFrame;
import view.previewUpdateJDialog;

/**
 *
 * @author dotnet2
 */
public class ViewManager extends javax.swing.JFrame {

    /**
     *
     */
    private static final long serialVersionUID = 1L;
    private Controller controller;
    private ArrayList<DbTable> tables;
    private String[] schemaLabels;

    Semaphore semaphore_stopUPDATE;
    public static boolean newIsExist;
    public static Thread finishingUpdate;

    /**
     * Creates new form DbManager
     *
     * @param c
     * @param allTables
     * @param schemas
     */
    public ViewManager(Controller c, ArrayList<DbTable> allTables, String[] schemas) {
        this.controller = c;

        this.schemaLabels = schemas;
        if (!allTables.isEmpty()) {
            this.tables = allTables;
            Collections.sort(tables, (DbTable o1, DbTable o2) -> o1.name.compareTo(o2.name));
        } else {
            return;
        }
        initComponents();
        jComboBox_select_schema.setSelectedItem(dbmanager.DbManager.dbConfigs.getLabel());
        if (!AuthManager.getInstance().getUser().getPermissions()[0].equals(PERMISSION.MASTER)) {
            ArrayList<DbTable> userTables = AuthManager.getInstance().getUser().getAccess_tables(), tempTables;
            tempTables = new ArrayList<>();
            Collections.sort(userTables, (DbTable o1, DbTable o2) -> o1.name.compareTo(o2.name));
            for (DbTable dbTable : userTables) {
                if (tables.contains(dbTable)) {
                    tempTables.add(dbTable);
                }
            }
            this.tables = tempTables;
        }

        jRadioButton_delete.setVisible(false);
        jRadioButton_search.setVisible(false);
        jRadioButton_update.setVisible(false);
        jRadioButton_insert.setVisible(false);
        jMenuItem_deleteUser.setVisible(false);
        jMenuItem_addUser.setVisible(false);
        jMenuItem_addSchema.setVisible(false);

        AuthManager authManager = AuthManager.getInstance();
        PERMISSION[] permissions = authManager.getUser().getPermissions();
        for (PERMISSION perms : permissions) {
            switch (perms) {
                case DELETE:
                    jRadioButton_delete.setVisible(true);
                    break;
                case INSERT:
                    jRadioButton_insert.setVisible(true);

                    break;
                case MASTER:
                    jRadioButton_insert.setVisible(true);
                    jRadioButton_update.setVisible(true);
                    jRadioButton_delete.setVisible(true);
                    jRadioButton_search.setVisible(true);
                    jMenuItem_deleteUser.setVisible(true);
                    jMenuItem_addUser.setVisible(true);
                    jMenuItem_addSchema.setVisible(true);
                    break;
                case SEARCH:
                    jRadioButton_search.setVisible(true);

                    break;
                case UPDATE:
                    jRadioButton_update.setVisible(true);

                    break;
                default:
                    break;
            }
        }
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);

        this.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup_mainOp = new javax.swing.ButtonGroup();
        jComboBox_select_schema = new javax.swing.JComboBox<>();
        jRadioButton_insert = new javax.swing.JRadioButton();
        jRadioButton_search = new javax.swing.JRadioButton();
        jRadioButton_update = new javax.swing.JRadioButton();
        jRadioButton_delete = new javax.swing.JRadioButton();
        jPanel_variablePanel = new javax.swing.JPanel();
        jPanel_operation = new javax.swing.JPanel();
        op_btnsPanels = new javax.swing.JPanel();
        jButton_ok = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu_refresh_tables = new javax.swing.JMenu();
        jMenuItem_refreshTables = new javax.swing.JMenuItem();
        jMenu_user = new javax.swing.JMenu();
        jMenuItem_addUser = new javax.swing.JMenuItem();
        jMenuItem_deleteUser = new javax.swing.JMenuItem();
        jMenuItem_logout = new javax.swing.JMenuItem();
        jMenu_schema = new javax.swing.JMenu();
        jMenuItem_addSchema = new javax.swing.JMenuItem();
        jMenuItem_deleteSchema = new javax.swing.JMenuItem();
        jMenu_info = new javax.swing.JMenu();
        jMenuItem_about = new javax.swing.JMenuItem();
        jMenuItem_help = new javax.swing.JMenuItem();

        buttonGroup_mainOp.add(jRadioButton_insert);
        buttonGroup_mainOp.add(jRadioButton_search);
        buttonGroup_mainOp.add(jRadioButton_update);
        buttonGroup_mainOp.add(jRadioButton_delete);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Db manager");
        setBackground(new java.awt.Color(204, 255, 204));
        setBounds(new java.awt.Rectangle(5, 5, 5, 5));
        setUndecorated(true);

        jComboBox_select_schema.setModel((new javax.swing.DefaultComboBoxModel<>(schemaLabels)));
        jComboBox_select_schema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_select_schemaActionPerformed(evt);
            }
        });

        jRadioButton_insert.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jRadioButton_insert.setText("Insert");
        jRadioButton_insert.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jRadioButton_insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_insertActionPerformed(evt);
            }
        });

        jRadioButton_search.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jRadioButton_search.setText("Search");
        jRadioButton_search.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jRadioButton_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_searchActionPerformed(evt);
            }
        });

        jRadioButton_update.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jRadioButton_update.setText("Update");
        jRadioButton_update.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jRadioButton_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_updateActionPerformed(evt);
            }
        });

        jRadioButton_delete.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jRadioButton_delete.setText("Delete");
        jRadioButton_delete.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jRadioButton_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_deleteActionPerformed(evt);
            }
        });

        jPanel_variablePanel.setAutoscrolls(true);
        jPanel_variablePanel.setLayout(new javax.swing.BoxLayout(jPanel_variablePanel, javax.swing.BoxLayout.Y_AXIS));

        jPanel_operation.setSize(500, 500);
        jPanel_operation.setMinimumSize(new Dimension(500, 500));
        jPanel_operation.setPreferredSize(getPreferredSize());
        jPanel_operation.setAutoscrolls(true);
        jPanel_operation.setPreferredSize(new java.awt.Dimension(500, 500));

        javax.swing.GroupLayout jPanel_operationLayout = new javax.swing.GroupLayout(jPanel_operation);
        jPanel_operation.setLayout(jPanel_operationLayout);
        jPanel_operationLayout.setHorizontalGroup(
            jPanel_operationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel_operationLayout.setVerticalGroup(
            jPanel_operationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel_variablePanel.add(jPanel_operation);

        op_btnsPanels.setLayout(new javax.swing.BoxLayout(op_btnsPanels, javax.swing.BoxLayout.X_AXIS));

        jButton_ok.setText("OK");
        op_btnsPanels.add(jButton_ok);

        jPanel_variablePanel.add(op_btnsPanels);

        jMenu_refresh_tables.setText("Refresh");

        jMenuItem_refreshTables.setText("refresh tables");
        jMenuItem_refreshTables.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_refreshTablesActionPerformed(evt);
            }
        });
        jMenu_refresh_tables.add(jMenuItem_refreshTables);

        jMenuBar1.add(jMenu_refresh_tables);

        jMenu_user.setText("User");

        jMenuItem_addUser.setText("add user");
        jMenuItem_addUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_addUserActionPerformed(evt);
            }
        });
        jMenu_user.add(jMenuItem_addUser);

        jMenuItem_deleteUser.setText("delete user");
        jMenuItem_deleteUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_deleteUserActionPerformed(evt);
            }
        });
        jMenu_user.add(jMenuItem_deleteUser);

        jMenuItem_logout.setText("logout");
        jMenuItem_logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_logoutActionPerformed(evt);
            }
        });
        jMenu_user.add(jMenuItem_logout);

        jMenuBar1.add(jMenu_user);

        jMenu_schema.setText("Schema");

        jMenuItem_addSchema.setText("add schema");
        jMenuItem_addSchema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_addSchemaActionPerformed(evt);
            }
        });
        jMenu_schema.add(jMenuItem_addSchema);

        jMenuItem_deleteSchema.setText("delete schema");
        jMenuItem_deleteSchema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_deleteSchemaActionPerformed(evt);
            }
        });
        jMenu_schema.add(jMenuItem_deleteSchema);

        jMenuBar1.add(jMenu_schema);

        jMenu_info.setText("Info");

        jMenuItem_about.setText("About");
        jMenuItem_about.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_aboutActionPerformed(evt);
            }
        });
        jMenu_info.add(jMenuItem_about);

        jMenuItem_help.setText("Help");
        jMenuItem_help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_helpActionPerformed(evt);
            }
        });
        jMenu_info.add(jMenuItem_help);

        jMenuBar1.add(jMenu_info);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel_variablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jRadioButton_insert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jRadioButton_search, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jRadioButton_update, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jRadioButton_delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(40, 40, 40))
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jComboBox_select_schema, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jComboBox_select_schema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jRadioButton_insert)
                    .addComponent(jRadioButton_search)
                    .addComponent(jRadioButton_update)
                    .addComponent(jRadioButton_delete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel_variablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    protected void deleteUserBtnActionPerformed(ActionEvent evt) {

    }


    private void jRadioButton_insertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_insertActionPerformed
        opPanelSetup(new InsertPanel(tables));
//        if (jButton_updateALL != null) {
//            op_btnsPanels.remove(jButton_updateALL);
//        }
        if (jButton_search_Others != null) {
            op_btnsPanels.remove(jButton_search_Others);
        }
//        if (jButton_deleteALL != null) {
//            op_btnsPanels.remove(jButton_deleteALL);
//        }
        jButton_ok.setText(Messages.getString("ViewManager.insert"));
        jButton_ok.setVisible(true);
        for (ActionListener actionListener : jButton_ok.getActionListeners()) {
            jButton_ok.removeActionListener(actionListener);
        }
        jButton_ok.addActionListener((ActionEvent arg0) -> {
            insertBtnActionPerformed();
        });
    }//GEN-LAST:event_jRadioButton_insertActionPerformed

    private void jRadioButton_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_searchActionPerformed
        if (jButton_search_Others == null) {

            jButton_search_Others = new JButton(Messages.getString("ViewManager.search_in_other_tables"));

            jButton_search_Others.addActionListener((ActionEvent arg0) -> {
                searchInOthersActionPerformed();
            });
        }
        opPanelSetup(new SearchPanel(tables));
//        if (jButton_updateALL != null) {
//            op_btnsPanels.remove(jButton_updateALL);
//        }
//        if (jButton_deleteALL != null) {
//            op_btnsPanels.remove(jButton_deleteALL);
//        }
        jButton_ok.setText(Messages.getString("ViewManager.search"));
        jButton_ok.setVisible(true);
        for (ActionListener actionListener : jButton_ok.getActionListeners()) {
            jButton_ok.removeActionListener(actionListener);
        }
        jButton_ok.addActionListener((ActionEvent arg0) -> {
            searchBtnActionPerformed();
            ((SearchPanel) jPanel_operation).drawResult();
        });
    }//GEN-LAST:event_jRadioButton_searchActionPerformed

    private void jRadioButton_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_updateActionPerformed
//        if (jButton_updateALL == null) {
//            jButton_updateALL = new JButton(Messages.getString("ViewManager.update_all"));
//            jButton_updateALL.addActionListener((ActionEvent arg0) -> {
//                updateAllBtnActionPerformed();
//            });
//        }

        opPanelSetup(new UpdatePanel(tables));
        if (jButton_search_Others != null) {
            op_btnsPanels.remove(jButton_search_Others);
        }
//        if (jButton_deleteALL != null) {
//            op_btnsPanels.remove(jButton_deleteALL);
//        }
        jButton_ok.setText(Messages.getString("ViewManager.update"));
        jButton_ok.setVisible(true);
        for (ActionListener actionListener : jButton_ok.getActionListeners()) {
            jButton_ok.removeActionListener(actionListener);
        }
        jButton_ok.addActionListener((ActionEvent arg0) -> {
            updateBtnActionPerformed();
        });
    }//GEN-LAST:event_jRadioButton_updateActionPerformed

    private void jRadioButton_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_deleteActionPerformed
//        if (jButton_deleteALL == null) {
//            jButton_deleteALL = new JButton(Messages.getString("ViewManager.delete_all"));
//            jButton_deleteALL.addActionListener((ActionEvent arg0) -> {
//                deleteAllActionPerformed();
//            });
//        }

        opPanelSetup(new DeletePanel(tables));
//        if (jButton_updateALL != null) {
//            op_btnsPanels.remove(jButton_updateALL);
//        }
        if (jButton_search_Others != null) {
            op_btnsPanels.remove(jButton_search_Others);
        }

        jButton_ok.setText(Messages.getString("ViewManager.delete"));
        jButton_ok.setVisible(true);
        for (ActionListener actionListener : jButton_ok.getActionListeners()) {
            jButton_ok.removeActionListener(actionListener);
        }
        jButton_ok.addActionListener((ActionEvent arg0) -> {
            deleteBtnActionPerformed();
        });
    }//GEN-LAST:event_jRadioButton_deleteActionPerformed

    private void jComboBox_select_schemaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_select_schemaActionPerformed
        for (DbConfigs schema : DbManager.schemas) {
            if (schema.getLabel().equals((String) jComboBox_select_schema.getSelectedItem())) {
                DbManager.dbConfigs = schema;
                // controller.refresh();
                break;
            }
        }

    }//GEN-LAST:event_jComboBox_select_schemaActionPerformed

    private void jMenuItem_addUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_addUserActionPerformed

        addUserJFrame addUserJFrame = new addUserJFrame();
        addUserJFrame.setVisible(true);
        addUserJFrame.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosed(WindowEvent arg0) {
                super.windowClosed(arg0);
                if (addUserJFrame.getUser().getUsername() != null && addUserJFrame.getUser().getPassword() != null) {
                    controller.addUser(addUserJFrame.getUser());
                    Utils.showCongrats(Messages.getString("ViewManager.adding_user_successfully"));
                } else {
                    Utils.showError(Messages.getString("ViewManager.op_not_completed"));
                }
            }

        });
    }//GEN-LAST:event_jMenuItem_addUserActionPerformed

    private void jMenuItem_deleteUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_deleteUserActionPerformed
        // preview for users 
        StorageManager storageManager = new StorageManager();
        deleteUserJFrame deleteUserJFrame = new view.deleteUserJFrame(storageManager.getUsers());
        deleteUserJFrame.setVisible(true);
        deleteUserJFrame.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosed(WindowEvent arg0) {
                super.windowClosed(arg0);
                if (deleteUserJFrame.getChosenUser() != null) {
                    storageManager.deleteUser(deleteUserJFrame.getChosenUser());
                    Utils.showCongrats("User is deleted!");
                } else {
                    Utils.showError(Messages.getString("ViewManager.op_not_completed"));
                }
            }

        });
        // storagemanager.delete return from preview
    }//GEN-LAST:event_jMenuItem_deleteUserActionPerformed

    private void jMenuItem_logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_logoutActionPerformed
        AuthManager authManager = AuthManager.getInstance();
        authManager.setUser(null);
        dispose();
        controller.loggingIn(false);
    }//GEN-LAST:event_jMenuItem_logoutActionPerformed

    private void jMenuItem_addSchemaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_addSchemaActionPerformed
        controller.openDbConfigPage();
    }//GEN-LAST:event_jMenuItem_addSchemaActionPerformed

    private void jMenuItem_deleteSchemaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_deleteSchemaActionPerformed
        Utils.showWarning("Not available now!");
    }//GEN-LAST:event_jMenuItem_deleteSchemaActionPerformed

    private void jMenuItem_helpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_helpActionPerformed
        showReportMessage(Messages.getString("DbManager.Help", "helpMsg"), "HELP");
    }//GEN-LAST:event_jMenuItem_helpActionPerformed

    private void jMenuItem_aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_aboutActionPerformed
        showReportMessage(Messages.getString("ViewManager.about_string"),
                Messages.getString("ViewManager.about"));
    }//GEN-LAST:event_jMenuItem_aboutActionPerformed

    private void jMenuItem_refreshTablesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_refreshTablesActionPerformed
        StorageManager storageManager = new StorageManager();

        dispose();
        String[] schemas = new String[DbManager.schemas.length];
        System.arraycopy(schemaLabels, 0, schemas, 0, schemaLabels.length);
        ViewManager viewManager = new ViewManager(controller, storageManager.getTables(DbManager.dbConfigs.getLabel()), schemas);
        viewManager.setSchemaSelectedItem(DbManager.dbConfigs.getLabel());
        viewManager.setVisible(true);
    }//GEN-LAST:event_jMenuItem_refreshTablesActionPerformed

    public void setSchemaSelectedItem(String schema_Label) {
        for (int i = 0; i < jComboBox_select_schema.getModel().getSize(); i++) {
            if (jComboBox_select_schema.getModel().getElementAt(i).equals(schema_Label)) {
                jComboBox_select_schema.setSelectedItem(jComboBox_select_schema.getModel().getElementAt(i));
                revalidate();
                repaint();
                break;
            }
        }
    }

    private void opPanelSetup(JPanel jPanel) {
        jPanel_variablePanel.remove(jPanel_operation);
        jPanel_variablePanel.remove(op_btnsPanels);

        jPanel_operation = jPanel;
//        jPanel_operation.setPreferredSize(
//                new Dimension(getToolkit().getScreenSize().width / 2, getToolkit().getScreenSize().height));
        jButton_ok.setText(Messages.getString("ViewManager.ok"));

//        if (jButton_updateALL != null) {
//            op_btnsPanels.remove(jButton_updateALL);
//            op_btnsPanels.add(jButton_updateALL);
//        }
        if (jButton_search_Others != null) {
            op_btnsPanels.remove(jButton_search_Others);
            op_btnsPanels.add(jButton_search_Others);
        }

//        if (jButton_deleteALL != null) {
//            op_btnsPanels.remove(jButton_deleteALL);
//            op_btnsPanels.add(jButton_deleteALL);
//        }
        jPanel_variablePanel.add(jPanel_operation);
        op_btnsPanels.add(jButton_ok);

        jPanel_variablePanel.add(op_btnsPanels);

        for (ActionListener actionListener : jButton_ok.getActionListeners()) {
            jButton_ok.removeActionListener(actionListener);
        }
        revalidate();
        repaint();
        pack();
    }

    // get col panels
    /*
	 * get col panels get dbCols compare in insert case if primary key is inserted
	 * get data in cols insert case get data in set update case get data in where in
	 * all cases except insert build query for search,update, delete, insert handle
	 * all choice for search case handle get from other tables
	 * 
     */
    @SuppressWarnings("deprecation")
    private void searchBtnActionPerformed() {

        // System.out.println("Hello from ViewManager, searchPanel calls me!! what do u
        // want ?! gvme data to search plz");
        ArrayList<String> operators = new ArrayList<>();
        ArrayList<colPanel> where_colPanels = ((SearchPanel) jPanel_operation).getColPanels();
        ArrayList<JCheckBox> get_colPanels = ((SearchPanel) jPanel_operation).getCheckBox_col2get();
        DbTable selected_table = ((SearchPanel) jPanel_operation).getSelectedTable();

        ArrayList<String> cols_to_get = new ArrayList<>();
        ArrayList<String> where_cols = new ArrayList<>();
        ArrayList<SimpleEntry<String, String>> where_values = new ArrayList<>();

        for (JCheckBox box : get_colPanels) {
            // System.out.println(box.getLabel().toString() + " : " + box.isSelected());
            if (box.getLabel().equals(Messages.getString("ViewManager.all_cols_to_select_checkbox"))
                    && box.isSelected()) {
                cols_to_get.clear();
                cols_to_get.add(Messages.getString("ViewManager.all"));
                // System.out.println("All");
                break;
            } else if (box.isSelected()) {
                cols_to_get.add(box.getLabel());
            }
        }

        for (int i = 0; i < selected_table.getCols().size(); i++) {
            if (!where_colPanels.get(i).getjTextField_colvalue().getText().isEmpty()) {
                where_cols.add(selected_table.getCols().get(i).getName());
                where_values.add(new SimpleEntry<>(where_colPanels.get(i).getjTextField_colvalue().getText(),
                        selected_table.getCols().get(i).getType()));
                operators.add(where_colPanels.get(i).getjComboBox_STATIC_OPERATORS().getSelectedItem().toString());
            }
        }
        String errorMsg = Messages.getString("ViewManager.empty_string");

        if (cols_to_get.isEmpty()) {
            errorMsg += Messages.getString("ViewManager.err_select_cols");
        }
        if (where_cols.isEmpty()) {
            errorMsg += Messages.getString("ViewManager.err_select_where");
        }
        if (errorMsg.equals(Messages.getString("ViewManager.empty_string"))) {
            String Cond_where_multiple_cols = ((SearchPanel) jPanel_operation).getCond_where_multiple_cols();
            boolean or = true;
            if (Cond_where_multiple_cols.equals(Messages.getString("ViewManager.AND_where_multiple_col_cond"))) {
                or = false;

            }
            ArrayList<ArrayList<SimpleEntry<String, String>>> search_content = this.controller.search(selected_table,
                    cols_to_get, where_cols, where_values, operators, or);
            if (search_content != null && search_content.size() > 0) {
                String[] cols = new String[search_content.get(0).size()];
                String[][] rows = new String[search_content.size()][search_content.get(0).size()];
                // prepare cols
                for (int i = 0; i < search_content.get(0).size(); i++) {
                    cols[i] = search_content.get(0).get(i).getKey();
                }
                // prepare rows
                for (int i = 0; i < search_content.size(); i++) {
                    for (int j = 0; j < search_content.get(i).size(); j++) {
                        if (search_content.get(i).get(j).getValue() != null) {
                            rows[i][j] = search_content.get(i).get(j).getValue();
                            // System.out.println(search_content.get(i).get(j).getValue().toString());

                        } else {
                            rows[i][j] = Messages.getString("ViewManager.null");
                            // System.out.println( "null");

                        }
                    }
                }
                ((SearchPanel) jPanel_operation).setResult_table_cols(cols);
                ((SearchPanel) jPanel_operation).setResult_data(rows);

            } else {
                Utils.showError(Messages.getString("ViewManager.failed"));
            }
        } else {
            Utils.showError(errorMsg);
        }
    }

    private void updateBtnActionPerformed() {
        // System.out.println("Hello from ViewManager, updatePanel calls me!! what do u
        // want ?! gvme data to update plz");
        ArrayList<colPanel> where_colPanels = ((UpdatePanel) jPanel_operation).getColPanels();
        ArrayList<colPanel> toUpdate_colPanels = ((UpdatePanel) jPanel_operation).getToUpdateColsPanels();
        final DbTable selected_table = ((UpdatePanel) jPanel_operation).getSelectedTable();
        ArrayList<String> operators = new ArrayList<>();
        ArrayList<String> cols_to_update = new ArrayList<>();
        ArrayList<SimpleEntry<String, String>> update_values = new ArrayList<>();

        ArrayList<String> where_cols = new ArrayList<>();
        ArrayList<SimpleEntry<String, String>> where_values = new ArrayList<>();

        for (int i = 0; i < selected_table.getCols().size(); i++) {
            if (!where_colPanels.get(i).getjTextField_colvalue().getText().isEmpty()) {
                where_cols.add(selected_table.getCols().get(i).getName());
                where_values.add(new SimpleEntry<>(where_colPanels.get(i).getjTextField_colvalue().getText(),
                        selected_table.getCols().get(i).getType()));
            }
            if (!toUpdate_colPanels.get(i).getjTextField_colvalue().getText().isEmpty()) {
                cols_to_update.add(selected_table.getCols().get(i).getName());
                update_values.add(new SimpleEntry<>(toUpdate_colPanels.get(i).getjTextField_colvalue().getText(),
                        selected_table.getCols().get(i).getType()));
                operators.add(where_colPanels.get(i).getjComboBox_STATIC_OPERATORS().getSelectedItem().toString());

            }
        }
        String Cond_where_multiple_cols = ((UpdatePanel) jPanel_operation).getCond_where_multiple_cols();
        boolean or = true;
        if (Cond_where_multiple_cols.equals(Messages.getString("ViewManager.AND_where_multiple_col_cond"))) {
            or = false;

        }
        boolean done = this.controller.update(selected_table.name, cols_to_update, update_values,
                where_cols, where_values, operators, or);
        // System.out.println(or);

        if (done) {
            Utils.showMessage(Messages.getString("ViewManager.done"));
        } else {
            Utils.showMessage(Messages.getString("ViewManager.failed"));
        }
    }

//    public void updateAllBtnActionPerformed() {
//
//        setNewisExist(false);
//        String report_message = Messages.getString("ViewManager.empty_string");
//        ArrayList<String> tables_updated = new ArrayList<>();
//        ArrayList<String> tables_not_updated = new ArrayList<>();
//        ArrayList<String> operators = new ArrayList<>();
//        String Cond_where_multiple_cols = ((UpdatePanel) jPanel_operation).getCond_where_multiple_cols();
//        final boolean or;
//        if (Cond_where_multiple_cols.equals(Messages.getString("ViewManager.AND_where_multiple_col_cond"))) {
//            or = false;
//        } else {
//            or = true;
//        }
//
//        ArrayList<colPanel> where_colPanels = ((UpdatePanel) jPanel_operation).getColPanels();
//        ArrayList<colPanel> toUpdate_colPanels = ((UpdatePanel) jPanel_operation).getToUpdateColsPanels();
//        DbTable selected_table = ((UpdatePanel) jPanel_operation).getSelectedTable();
//
//        final ArrayList<String> cols_to_update = new ArrayList<>();
//        final ArrayList<SimpleEntry<String, String>> update_values = new ArrayList<>();
//
//        final ArrayList<String> where_cols = new ArrayList<>();
//        final ArrayList<SimpleEntry<String, String>> where_values = new ArrayList<>();
//
//        final ArrayList<dbCol> primaryKey_col = new ArrayList<>();
//        final ArrayList<String> primaryKey_col_names = new ArrayList<>();
//
//        final ArrayList<SimpleEntry<String, String>> primaryKey_col_oldValue = new ArrayList<>();
//        final ArrayList<SimpleEntry<String, String>> primaryKey_col_newValue = new ArrayList<>();
//
//        if (selected_table.getCols().size() > 0) {
//            String[][] data = null;
//            String[] cols = new String[selected_table.getCols().size()];
//
//            for (int i = 0; i < selected_table.getCols().size(); i++) {
//                if (!where_colPanels.get(i).getjTextField_colvalue().getText().isEmpty()) {
//                    where_cols.add(selected_table.getCols().get(i).getName());
//                    where_values.add(new SimpleEntry<>(where_colPanels.get(i).getjTextField_colvalue().getText(),
//                            selected_table.getCols().get(i).getType()));
//                }
//                if (!toUpdate_colPanels.get(i).getjTextField_colvalue().getText().isEmpty()) {
//                    cols_to_update.add(selected_table.getCols().get(i).getName());
//                    update_values
//                            .add(new SimpleEntry<>(toUpdate_colPanels.get(i).getjTextField_colvalue().getText(),
//                                    selected_table.getCols().get(i).getType()));
//                    operators.add(where_colPanels.get(i).getjComboBox_STATIC_OPERATORS().getSelectedItem().toString());
//
//                }
//            }
//
////            for (dbCol dbcol : selected_table.getCols()) {
////                if (dbcol.isAcceptNull()) {
////                    primaryKey_col.add(dbcol);
////                    primaryKey_col_names.add(dbcol.getName());
////                    break;
////                }
////            }
//            String pk = controller.getPK(selected_table.name);
//            primaryKey_col_names.add(pk);
//            primaryKey_col.add(selected_table.getCol(pk));
//
//            /// determine which case will go through
//            if (!where_cols.isEmpty()) {
//                ArrayList<ArrayList<SimpleEntry<String, String>>> search_content = this.controller
//                        .search(selected_table, primaryKey_col_names, where_cols, where_values, operators, or);
//                if (search_content != null) {
//                    if (search_content.size() > 0) {
//                        finishingUpdate = new Thread(new Runnable() {
//                            @Override
//                            public void run() {
//                                final boolean done1, done2;
//
//                                if (newIsExist) {
//                                    ArrayList<ref> refs = controller.getRefinfo(selected_table.name);
////                                    ArrayList<DbTable> tables_toUpdate = getTablesContain(primaryKey_col_names);
////                                    if (tables_toUpdate.contains(selected_table)) {
////                                        tables_toUpdate.remove(selected_table);
////                                    }
////
//                                    for (ref R : refs) {
////                                        ArrayList<String> c2u = new ArrayList<>();
////                                        for (String c : primaryKey_col_names) {
////                                            for (dbCol c2 : dbTable.getCols()) {
////                                                
////                                                System.out.println("c"+c);
////                                                System.out.println("c2"+c2.getName());
////                                                
////                                                if (c.contains(c2.getName())
////                                                        || c2.getClass().toString().contains(c)) {
////                                                    c2u.add(c2.getName());
////                                                    break;
////                                                }
////                                            }
////                                        }
////                                        System.out.println(primaryKey_col_newValue.size());
////                                        System.out.println(primaryKey_col_oldValue.size());
////                                        System.out.println(c2u.size());
////                                        
//                                        ArrayList<String> c2u = new ArrayList<>();
//                                        c2u.add(R.col_name);
//                                        StorageManager storageManager = new StorageManager();
//                                        boolean done = controller.cascadeUpdate(storageManager.getDbTable(R.table_name), c2u,
//                                                primaryKey_col_newValue, c2u, primaryKey_col_oldValue, operators, or);
//                                        if (done) {
//                                            tables_updated.add(
//                                                    R.table_name + Messages.getString("ViewManager.end_line"));
//                                        } else {
//                                            if (!R.table_name.contains("USLOG$")) {
//                                                tables_not_updated.add(
//                                                        R.table_name + Messages.getString("ViewManager.end_line"));
//                                            }
//
//                                        }
//                                    }
//
//                                    //  System.out.println("pk_old_v" + primaryKey_col_oldValue.size());
//                                    //  System.out.println("pk_old_names" + primaryKey_col_names.size());
//                                    done1 = controller.delete(selected_table.getName(), primaryKey_col_names, primaryKey_col_oldValue, operators, or);
//                                    done2 = true;
//                                } else {
//                                    //  System.out.println("notNewisExist");
//                                    done2 = controller.cascadeUpdate(selected_table, cols_to_update, update_values,
//                                            primaryKey_col_names, primaryKey_col_oldValue, operators, or);
//                                    done1 = true;
//                                }
//                                if (done1 && done2) {
//                                    showReportMessage(tables_updated, tables_not_updated,
//                                            Messages.getString("ViewManager.done_report_msg_record_not_exist") + report_message, true);
//                                } else {
//                                    // searching for active col to disable
//                                    boolean active_no = false;
//                                    for (dbCol col : selected_table.getCols()) {
//                                        if (col.getName().equals(Messages.getString("ViewManager.active_col"))) {
//                                            ArrayList<String> active_as_arraylist = new ArrayList<>();
//                                            active_as_arraylist.add(Messages.getString("ViewManager.active_col"));
//                                            ArrayList<SimpleEntry<String, String>> active_no_as_updateValues = new ArrayList<>();
//                                            active_no_as_updateValues
//                                                    .add(new SimpleEntry<>(Messages.getString("ViewManager.active_col_set_to_n"),
//                                                            Messages.getString("ViewManager.char_datatype")));
//                                            if (controller.cascadeUpdate(selected_table, active_as_arraylist,
//                                                    active_no_as_updateValues, primaryKey_col_names, primaryKey_col_oldValue, operators, or)) {
//                                                active_no = true;
//                                            }
//                                            break;
//                                        }
//                                    }
//                                    if (active_no) {
//                                        showReportMessage(tables_updated, tables_not_updated,
//                                                Messages.getString("ViewManager.failed_report_msg_record") + report_message, true);
//
//                                    } else {
//                                        showReportMessage(tables_updated, tables_not_updated,
//                                                Messages.getString("ViewManager.failed_report_msg_record_update_active_to_no") + report_message,
//                                                false);
//                                    }
//                                }
//                            }
//                        });
//                        // System.out.println("Hello from content2");
//                        try {
//                            for (int r = 0; r < search_content.size(); r++) {
//                                for (int i = 0; i < search_content.get(r).size(); i++) {
//                                    for (dbCol col : primaryKey_col) {
//                                        primaryKey_col_oldValue.add(
//                                                new SimpleEntry<>(search_content.get(r).get(i).getValue(),
//                                                        col.getType()));
//                                    }
//
//                                }
//                            }
//                        } catch (Exception e) {
//                            System.err.print(e.getMessage());
//                        }
//                        if (primaryKey_col_oldValue.size() > 1 && cols_to_update.isEmpty()) {
//                            // case 2 :  fetch new data from where_values 
//                            // show old with radio btns and get selected once closed with non -1 returned value
//                            System.out.println("case2");
//                            ArrayList<String> getallcols = new ArrayList<>();
//                            getallcols.add(Messages.getString("Controller.select_all"));
//                            search_content = this.controller
//                                    .search(selected_table, getallcols, where_cols, where_values, operators, or);
//
//                            cols = new String[selected_table.getCols().size()];
//                            // prepare cols
//                            for (int j = 0; j < selected_table.getCols().size(); j++) {
//                                cols[j] = selected_table.getCols().get(j).getName();
//                            }
//                            // prepare data
//                            if (search_content != null) {
//                                if (search_content.size() > 0) {
//
//                                    data = new String[search_content.size()][cols.length];
//                                    for (int r = 0; r < search_content.size(); r++) {
//                                        for (int i = 0; i < search_content.get(r).size(); i++) {
//                                            data[r][i] = search_content.get(r).get(i).getValue();
//                                        }
//                                    }
//                                    final String finalmData[][] = data;
//                                    final String finalmCols[] = cols;
//                                    //primaryKey_col_oldValue.clear();
//                                    primaryKey_col_newValue.clear();
//                                    new Thread(() -> {
//                                        chooseRecordJDialog recordJDialog = new chooseRecordJDialog(finalmData, finalmCols);
//                                        recordJDialog.setVisible(true);
//
//                                        recordJDialog.addWindowListener(new WindowAdapter() {
//
//                                            @Override
//                                            public void windowClosed(WindowEvent e) {
//                                                super.windowClosed(e);
//                                                if (recordJDialog.getChoosenIndex() != -1) {
//                                                    final int user_choice = recordJDialog.getChoosenIndex();
//                                                    //    System.out.println("chosen: " + recordJDialog.getChoosenIndex());
//
//                                                    primaryKey_col.forEach((col) -> {
//                                                        for (int j = 0; j < finalmCols.length; j++) {
//                                                            if (col.getName().equals(finalmCols[j])) {
//                                                                primaryKey_col_newValue.add(
//                                                                        new SimpleEntry<>(finalmData[user_choice][j],
//                                                                                col.getType()));
//                                                            }
//                                                        }
//                                                    });
//                                                    for (int r = 0; r < finalmData.length; r++) {
//                                                        if (r != user_choice) {
//                                                            for (final dbCol col : primaryKey_col) {
//                                                                for (int j = 0; j < finalmCols.length; j++) {
//                                                                    if (col.getName().equals(finalmCols[j])) {
//                                                                        primaryKey_col_oldValue.add(
//                                                                                new SimpleEntry<>(finalmData[r][j],
//                                                                                        col.getType()));
//                                                                    }
//                                                                }
//                                                            }
//                                                        }
//                                                    }
//                                                    //System.out.println(primaryKey_col_newValue.size());
//                                                    //System.out.println(primaryKey_col_oldValue.size());
//                                                }
//                                            }
//                                        });
//                                    }).start();
//                                }
//                            }
//                        } else if (primaryKey_col_newValue.size() > 1 && !cols_to_update.isEmpty()) {
//                            Utils.showWarning("cannot determine which is old because entered data is multiple!\nplz, update old first");
//                        } else {
//                            // case 1 : fetch data from cols_to_update and result set to get pk_new_values
//                            // after get new data .. preview old record and new record (search result) ..
//                            // show confirm msg to start looping and update all!
//                            System.out.println("case1");
//
//                            if (!cols_to_update.isEmpty()) {
//
//                                ArrayList<String> getallcols = new ArrayList<>();
//                                getallcols.add(Messages.getString("Controller.select_all"));
//                                search_content = this.controller
//                                        .search(selected_table, getallcols, cols_to_update, update_values, operators, or);
//
//                                String[][] new_data;
//                                String[] new_cols = new String[selected_table.getCols().size()];
//                                // prepare cols
//                                for (int j = 0; j < selected_table.getCols().size(); j++) {
//                                    new_cols[j] = selected_table.getCols().get(j).getName();
//                                }
//                                // prepare data
//                                if (search_content != null) {
//                                    if (search_content.size() > 0) {
//
//                                        new_data = new String[search_content.size()][new_cols.length];
//                                        for (int r = 0; r < search_content.size(); r++) {
//                                            for (int i = 0; i < search_content.get(r).size(); i++) {
//                                                new_data[r][i] = search_content.get(r).get(i).getValue();
//                                            }
//                                        }
//
//                                        getallcols = new ArrayList<>();
//                                        getallcols.add(Messages.getString("Controller.select_all"));
//                                        search_content = this.controller
//                                                .search(selected_table, getallcols, where_cols, where_values, operators, or);
//
//                                        cols = new String[selected_table.getCols().size()];
//                                        // prepare cols
//                                        for (int j = 0; j < selected_table.getCols().size(); j++) {
//                                            cols[j] = selected_table.getCols().get(j).getName();
//                                        }
//                                        // prepare data
//                                        if (search_content != null) {
//                                            if (search_content.size() > 0) {
//
//                                                data = new String[search_content.size()][cols.length];
//                                                for (int r = 0; r < search_content.size(); r++) {
//                                                    for (int i = 0; i < search_content.get(r).size(); i++) {
//                                                        //     System.out.println("hi: " + search_content.get(r).get(i).getValue());
//                                                        data[r][i] = search_content.get(r).get(i).getValue();
//                                                    }
//                                                }
//                                            }
//                                        }
//                                        final String[][] finalnewData = new_data;
//                                        final String finalnewCols[] = new_cols;
//                                        final String finalOldData[][] = data;
//                                        final String finalOldCols[] = cols;
//                                        // primaryKey_col_oldValue.clear();
//                                        // primaryKey_col_newValue.clear();
//                                        new Thread(() -> {
//                                            previewUpdateJDialog preview_updateJDialog = new previewUpdateJDialog(finalOldData, finalOldCols, finalnewData, finalnewCols);
//                                            preview_updateJDialog.setVisible(true);
//                                            preview_updateJDialog.addWindowListener(new WindowAdapter() {
//                                                @Override
//                                                public void windowClosed(WindowEvent e) {
//                                                    super.windowClosed(e);
//                                                    if (preview_updateJDialog.confirm) {
//                                                        //  setNewisExist(true);
//                                                        //    System.out.println("confirmed");
//                                                        for (int r = 0; r < finalnewData.length; r++) {
//                                                            for (int j = 0; j < finalnewCols.length; j++) {
//                                                                for (dbCol pk_col : primaryKey_col) {
//                                                                    if (pk_col.getName().equals(finalnewCols[j])) {
//                                                                        primaryKey_col_newValue.add(new SimpleEntry<>(finalnewData[r][j], pk_col.getType()));
//                                                                    }
//                                                                }
//                                                            }
//                                                        }
//                                                        for (int r = 0; r < finalOldData.length; r++) {
//                                                            for (int j = 0; j < finalOldCols.length; j++) {
//                                                                for (dbCol pk_col : primaryKey_col) {
//                                                                    if (pk_col.getName().equals(finalOldCols[j])) {
//                                                                        primaryKey_col_oldValue.add(new SimpleEntry<>(finalOldData[r][j], pk_col.getType()));
//                                                                    }
//                                                                }
//                                                            }
//                                                        }
//                                                    }
//                                                }
//                                            }
//                                            );
//                                        }).start();
//                                    } else {
//                                        //   System.out.println("new data not exist");
//                                        finishingUpdate.start();
//                                    }
//                                }
//
//                                search_content = this.controller.search(selected_table,
//                                        primaryKey_col_names, cols_to_update, update_values, operators, or);
//
//                                if (search_content != null) {
//                                    if (search_content.size() > 0) {
//                                        setNewisExist(true);
//                                    }
//
//                                    try {
//                                        for (int r = 0; r < search_content.size(); r++) {
//                                            for (int i = 0; i < search_content.get(r).size(); i++) {
//                                                for (dbCol col : primaryKey_col) {
//                                                    primaryKey_col_newValue.add(new SimpleEntry<>(
//                                                            search_content.get(r).get(i).getValue(), col.getType()));
//                                                }
//                                            }
//                                        }
//                                    } catch (Exception e) {
//                                        System.err.print(e.getMessage());
//                                    }
//                                }
//                            } else {
//                                Utils.showError("old data is single record and couldn't execute update operation with such limited info!");
//                            }
//                        }
//                    }
//                } else {
//                    Utils.showError("there is no data with the entered old data!");
//                }
//            } else {
//                Utils.showError("u have to determine old data! no old data!");
//            }
//        } else {
//            Utils.showError("table has no cols!");
//        }
//    }
    @SuppressWarnings({"unchecked", "deprecation"})
    public void searchInOthersActionPerformed() {
        String[] cols = ((SearchPanel) jPanel_operation).getResult_table_cols();
        if (cols.length == 0) {
            searchBtnActionPerformed();
        }
        String Cond_where_multiple_cols = ((SearchPanel) jPanel_operation).getCond_where_multiple_cols();
        boolean or = true;
        if (Cond_where_multiple_cols.equals(Messages.getString("ViewManager.AND_where_multiple_col_cond"))) {
            or = false;
        }

        DbTable selected_table = ((SearchPanel) jPanel_operation).getSelectedTable();
        ArrayList<colPanel> where_colPanels = ((SearchPanel) jPanel_operation).getColPanels();
        ArrayList<String> where_cols = new ArrayList<>();
        ArrayList<SimpleEntry<String, String>> where_values = new ArrayList<>();
        ArrayList<String> operators = new ArrayList<>();
        if (selected_table != null) {

            ArrayList<String> primaryKey_col_names = new ArrayList<>();
            ArrayList<dbCol> primary_cols = new ArrayList<>();
            for (dbCol dbcol : selected_table.getCols()) {
                if (dbcol.isAcceptNull()) {
                    primary_cols.add(dbcol);
                    primaryKey_col_names.add(dbcol.getName());
                    break;
                }
            }
            for (int i = 0; i < selected_table.getCols().size(); i++) {
                if (!where_colPanels.get(i).getjTextField_colvalue().getText().isEmpty()) {
                    where_cols.add(selected_table.getCols().get(i).getName());
                    where_values.add(new SimpleEntry<>(where_colPanels.get(i).getjTextField_colvalue().getText(),
                            selected_table.getCols().get(i).getType()));
                    operators.add(where_colPanels.get(i).getjComboBox_STATIC_OPERATORS().getSelectedItem().toString());

                }
            }
            ArrayList<ArrayList<SimpleEntry<String, String>>> primary_values = controller.search(selected_table,
                    primaryKey_col_names, where_cols, where_values, operators, or);
            ArrayList<SimpleEntry<String, String>> primary_where_in_otherTables = new ArrayList<>();
            for (int i = 0; i < primary_values.size(); i++) {
                for (int j = 0; j < primary_values.get(0).size(); j++) {
                    for (dbCol col : primary_cols) {
                        if (col.getName().equals(primary_values.get(i).get(j).getKey())) {
                            primary_where_in_otherTables.add(new SimpleEntry<>(primary_values.get(i).get(j).getValue(),
                                    col.getType()));
                        }
                    }
                }
            }

            ArrayList<DbTable> tables_toSearch = this.getTablesContain(primaryKey_col_names);

            JDialog dialog = new JDialog();
            dialog.setTitle(Messages.getString("ViewManager.choose_table_name"));
            JPanel jPanel = new JPanel();
            jPanel.setLayout(new BoxLayout(jPanel, BoxLayout.Y_AXIS));
            jPanel.setPreferredSize(
                    new Dimension(getToolkit().getScreenSize().width / 2, getToolkit().getScreenSize().height / 4));

            @SuppressWarnings("rawtypes")
            javax.swing.JComboBox jComboBox_table_names = new javax.swing.JComboBox<>();

            String[] table_names = new String[tables_toSearch.size()];
            for (int i = 0; i < tables_toSearch.size(); i++) {

                table_names[i] = tables_toSearch.get(i).getName();
            }
            ArrayList<String> cols_to_search_inOtherTables = new ArrayList<>();

            jComboBox_table_names.setModel(new javax.swing.DefaultComboBoxModel<>(table_names));
            jComboBox_table_names.addActionListener((ActionEvent arg0) -> {
                for (int i = 0; i < tables_toSearch.size(); i++) {
                    if (tables_toSearch.get(i).getName()
                            .equals(((String) jComboBox_table_names.getSelectedItem()))) {
                        ((SearchPanel) jPanel_operation).setOtherTablesAppended(tables_toSearch.get(i));
                        for (String c : primaryKey_col_names) {
                            for (dbCol c2 : tables_toSearch.get(i).getCols()) {
                                if (/* c.contains(c2.getName()) || */c2.getName()
                                                .contains(c)) {
                                    if (!cols_to_search_inOtherTables.contains(c2.getName())) {
                                        cols_to_search_inOtherTables.add(c2.getName());
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            });
            jComboBox_table_names.setSelectedIndex(0);
            jComboBox_table_names.setMaximumSize(new Dimension(200, 100));
            jComboBox_table_names.setBorder(new EmptyBorder(20, 20, 20, 20));
            JButton button_ok = new JButton(Messages.getString("ViewManager.ok"));
            button_ok.addActionListener((ActionEvent arg0) -> {
                if (((SearchPanel) jPanel_operation).getOtherTablesAppended() != null) {
                    ArrayList<ArrayList<SimpleEntry<String, String>>> result = controller.search(
                            ((SearchPanel) jPanel_operation).getOtherTablesAppended(), cols_to_search_inOtherTables,
                            cols_to_search_inOtherTables, primary_where_in_otherTables, operators, true);

                    Boolean[] exists;
                    if (result != null) {

                        exists = new Boolean[result.size()];
                        if (result.size() > 0) {
                            for (int i = 0; i < result.size(); i++) {
                                if (result.get(i).size() > 0) {
                                    exists[i] = true;
                                }
                            }
                        }
                    } else {
                        exists = new Boolean[0];
                    }
                    ((SearchPanel) jPanel_operation).appendTableAsSearchInOthers(
                            ((SearchPanel) jPanel_operation).getOtherTablesAppended().getName(), exists);
                    ((SearchPanel) jPanel_operation).drawResult();
                    ((SearchPanel) jPanel_operation).setOtherTablesAppended(null);
                    dialog.dispose();
                }
            });
            jPanel.add(jComboBox_table_names);
            jPanel.add(button_ok);
            dialog.add(jPanel);
            dialog.setLocation(getToolkit().getScreenSize().width / 4, getToolkit().getScreenSize().height / 4);
            dialog.setPreferredSize(
                    new Dimension(getToolkit().getScreenSize().width / 2, getToolkit().getScreenSize().height / 4));
            dialog.setLocation(getToolkit().getScreenSize().width / 4, getToolkit().getScreenSize().height / 4);
            dialog.pack();
            dialog.show();
        } else {
            System.out.println(Messages.getString("ViewManager.choose_main_table_and_insert_where_values_first"));
        }
    }

    public static void setNewisExist(boolean exist) {
        newIsExist = exist;

    }

    /*
	 * private void previerwSearch_beforeUpdate() {
	 * 
	 * }
     */

 /*
	 * for update action : which classes updated and which is not b is boolean if
	 * true so title will be info else (if false) so title will be error
     */
    @SuppressWarnings("deprecation")
    private void showReportMessage(ArrayList<String> done, ArrayList<String> undone, String short_info, boolean b) {
        JDialog dialog = new JDialog();
        JPanel DialogmainPanel = new JPanel();

        javax.swing.JScrollPane jScrollPane_done_tables;
        javax.swing.JScrollPane jScrollPane_short_info;
        javax.swing.JScrollPane jScrollPane_undone_tables;
        javax.swing.JTextArea jTextArea_done_tables;
        javax.swing.JTextArea jTextArea_shortInfo;
        javax.swing.JTextArea jTextArea_undone_tables;
        javax.swing.JToggleButton show_done;
        javax.swing.JToggleButton show_undone;

        // dialog.setLayout(new BoxLayout(dialog, BoxLayout.X_AXIS));
        show_done = new javax.swing.JToggleButton();
        show_undone = new javax.swing.JToggleButton();
        jScrollPane_short_info = new javax.swing.JScrollPane();
        jTextArea_shortInfo = new javax.swing.JTextArea();
        jScrollPane_done_tables = new javax.swing.JScrollPane();
        jTextArea_done_tables = new javax.swing.JTextArea();
        jScrollPane_undone_tables = new javax.swing.JScrollPane();
        jTextArea_undone_tables = new javax.swing.JTextArea();

        jTextArea_shortInfo.setText(short_info);
        jTextArea_shortInfo.setEditable(false);

        jTextArea_shortInfo.setColumns(20);
        jTextArea_shortInfo.setRows(5);
        jScrollPane_short_info.setViewportView(jTextArea_shortInfo);

        jTextArea_done_tables.setColumns(20);
        jTextArea_done_tables.setRows(5);
        jScrollPane_done_tables.setViewportView(jTextArea_done_tables);

        jTextArea_undone_tables.setColumns(20);
        jTextArea_undone_tables.setRows(5);
        jScrollPane_undone_tables.setViewportView(jTextArea_undone_tables);
        if (b) {
            dialog.setTitle(Messages.getString("ViewManager.infor"));
            undone.clear();
        } else {
            dialog.setTitle(Messages.getString("ViewManager.error"));
        }
        String text = "";
        text = done.stream().map((table_updated_success) -> table_updated_success + "\n").reduce(text, String::concat);
        jTextArea_done_tables.setText(text);
        text = "";
        text = undone.stream().map((table_updated_failed) -> table_updated_failed + "\n").reduce(text, String::concat);
        jTextArea_undone_tables.setText(text);
        jTextArea_undone_tables.setEditable(false);
        jTextArea_done_tables.setEditable(false);
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(DialogmainPanel);
        DialogmainPanel.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout
                .createSequentialGroup().addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane_short_info)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(show_done, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jScrollPane_done_tables, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                137, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane_undone_tables, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                137, Short.MAX_VALUE)
                                        .addComponent(show_undone, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap()));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
                        layout.createSequentialGroup().addContainerGap()
                                .addComponent(jScrollPane_short_info, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(show_undone).addComponent(show_done))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane_done_tables, javax.swing.GroupLayout.DEFAULT_SIZE, 78,
                                                Short.MAX_VALUE)
                                        .addComponent(jScrollPane_undone_tables))
                                .addContainerGap()));

        if (done != null && undone != null) {
            show_done.setText("see " + done.size() + " done");
            show_undone.setText("see " + undone.size() + " undone");
        } else {
            show_done.setText("see done");
            show_undone.setText("see undone");
        }

        show_done.addActionListener((ActionEvent arg0) -> {
            if (show_done.isSelected()) {
                jScrollPane_done_tables.setVisible(true);

                dialog.revalidate();
                dialog.repaint();
            } else {
                jScrollPane_done_tables.setVisible(false);

                dialog.revalidate();
                dialog.repaint();
            }
        });

        show_undone.addActionListener((ActionEvent arg0) -> {
            if (show_undone.isSelected()) {
                jScrollPane_undone_tables.setVisible(true);

                dialog.revalidate();
                dialog.repaint();
            } else {
                jScrollPane_undone_tables.setVisible(false);

                dialog.revalidate();
                dialog.repaint();
            }
        });

        jScrollPane_done_tables.setVisible(false);
        jScrollPane_undone_tables.setVisible(false);

        jScrollPane_done_tables.setPreferredSize(new Dimension(200, 300));
        jScrollPane_undone_tables.setPreferredSize(new Dimension(200, 300));

        jScrollPane_done_tables.setMinimumSize(new Dimension(200, 300));
        jScrollPane_undone_tables.setMinimumSize(new Dimension(200, 300));
        DialogmainPanel.setPreferredSize(new Dimension(500, 600));
        dialog.setLocation(getToolkit().getScreenSize().width / 2, getToolkit().getScreenSize().height / 4);

        dialog.setPreferredSize(new Dimension(500, 600));

        dialog.add(DialogmainPanel);
        dialog.pack();
        dialog.show();
    }

    /*
	 * for update action : which classes updated and which is not title is set from
	 * param.
     */
    @SuppressWarnings("deprecation")
    private void showReportMessage(String string, String title) {
        JDialog dialog = new JDialog();
        JTextArea textArea = new JTextArea(string);
        textArea.setEditable(false);

        JScrollPane jScrollPane = new JScrollPane(textArea);
        jScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        jScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        jScrollPane.setViewportView(textArea);
        dialog.add(jScrollPane);
        dialog.setTitle(title);
        dialog.setAlwaysOnTop(true);

        dialog.setPreferredSize(
                new Dimension(getToolkit().getScreenSize().width / 2, getToolkit().getScreenSize().height / 2));
        dialog.setLocation(getToolkit().getScreenSize().width / 4, getToolkit().getScreenSize().height / 4);
        dialog.pack();
        dialog.show();
    }

    private void deleteBtnActionPerformed() {

        // System.out.println("Hello from ViewManager, deletePanel calls me!! what do u
        // want ?! gvme data to delete plz");
        String Cond_where_multiple_cols = ((DeletePanel) jPanel_operation).getCond_where_multiple_cols();
        boolean or = true;
        if (Cond_where_multiple_cols.equals(Messages.getString("ViewManager.AND_where_multiple_col_cond"))) {
            or = false;

        }

        ArrayList<colPanel> where_colPanels = ((DeletePanel) jPanel_operation).getColPanels();
        DbTable selected_table = ((DeletePanel) jPanel_operation).getSelectedTable();

        ArrayList<String> where_cols = new ArrayList<>();
        ArrayList<SimpleEntry<String, String>> where_values = new ArrayList<>();
        ArrayList<String> operators = new ArrayList<>();

        for (int i = 0; i < selected_table.getCols().size(); i++) {
            if (!where_colPanels.get(i).getjTextField_colvalue().getText().isEmpty()) {
                where_cols.add(selected_table.getCols().get(i).getName());
                where_values.add(new SimpleEntry<>(where_colPanels.get(i).getjTextField_colvalue().getText(),
                        selected_table.getCols().get(i).getType()));
                operators.add(where_colPanels.get(i).getjComboBox_STATIC_OPERATORS().getSelectedItem().toString());

            }
        }

        boolean assurance = this.controller.delete(selected_table.getName(), where_cols, where_values, operators, or);
        if (assurance) {
            Utils.showCongrats(Messages.getString("ViewManager.done"));

        } else {
            Utils.showError("Cannot delete!");
        }
    }

//    private void deleteAllActionPerformed() {
//
//        // System.out.println("Hello from ViewManager, deletePanel calls me!! what do u
//        // want ?! gvme data to delete plz");
//        String Cond_where_multiple_cols = ((DeletePanel) jPanel_operation).getCond_where_multiple_cols();
//        boolean or = true;
//        if (Cond_where_multiple_cols.equals(Messages.getString("ViewManager.AND_where_multiple_col_cond"))) {
//            or = false;
//        }
//
//        ArrayList<colPanel> where_colPanels = ((DeletePanel) jPanel_operation).getColPanels();
//        DbTable selected_table = ((DeletePanel) jPanel_operation).getSelectedTable();
//
//        ArrayList<String> where_cols = new ArrayList<>();
//        ArrayList<SimpleEntry<String, String>> where_values = new ArrayList<>();
//        ArrayList<String> operators = new ArrayList<>();
//
//        for (int i = 0; i < selected_table.getCols().size(); i++) {
//            if (!where_colPanels.get(i).getjTextField_colvalue().getText().isEmpty()) {
//                where_cols.add(selected_table.getCols().get(i).getName());
//                where_values.add(new SimpleEntry<>(where_colPanels.get(i).getjTextField_colvalue().getText(),
//                        selected_table.getCols().get(i).getType()));
//                operators.add(where_colPanels.get(i).getjComboBox_STATIC_OPERATORS().getSelectedItem().toString());
//
//            }
//        }
//
//        boolean assurance = this.controller.cascadeDelete(selected_table, where_cols, where_values, operators, or);
//        if (assurance) {
//            Utils.showCongrats(Messages.getString("ViewManager.done"));
//
//        } else {
//            Utils.showError("Cannot delete!");
//        }
//    }
    private void insertBtnActionPerformed() {
        // System.out.println("Hello from ViewManager, insertPanel calls me!! what do u
        // want ?! gvme data to insert plz");
        ArrayList<colPanel> colPanels = ((InsertPanel) jPanel_operation).getColPanels();
        DbTable selected_table = ((InsertPanel) jPanel_operation).getSelectedTable();

        ArrayList<String> col_names = new ArrayList<>();
        ArrayList<SimpleEntry<String, String>> new_values = new ArrayList<>();

        for (int i = 0; i < selected_table.getCols().size(); i++) {
            if (!colPanels.get(i).getjTextField_colvalue().getText().isEmpty()) {
                col_names.add(selected_table.getCols().get(i).getName());
                new_values.add(new SimpleEntry<>(colPanels.get(i).getjTextField_colvalue().getText(),
                        selected_table.getCols().get(i).getType()));
            }
        }
        boolean canBeInserted = true;
        for (dbCol dbcol : selected_table.getCols()) {
            if (dbcol.isAcceptNull()) {
                if (col_names.indexOf(dbcol.getName()) == -1) {
                    Utils.showError(Messages.getString("ViewManager.err_cannot_leave") + dbcol.getName()
                            + Messages.getString("ViewManager.empty"));
                    canBeInserted = false;
                    break;
                }
            }
        }
        if (canBeInserted) {
            boolean assurance = this.controller.insert(selected_table.getName(), col_names, new_values);
            if (assurance) {
                Utils.showCongrats(Messages.getString("ViewManager.done"));
            } else {
                Utils.showError(Messages.getString("Cannot insert!"));
            }
        }
    }

    /*
	 * get tables from schema which contains cols (ArrayList<String> primary_cols)
     */
    private ArrayList<DbTable> getTablesContain(ArrayList<String> primary_cols) {

        ArrayList<DbTable> result = new ArrayList<>();
        for (DbTable dbTable : this.tables) {
            for (dbCol col : dbTable.getCols()) {
                if (primary_cols.contains(col.getName())) {

                    result.add(dbTable);
                    // System.out.println(dbTable.getName());
                    break;
                } else {
                    for (String p_col : primary_cols) {
                        if (col.getName().contains(p_col)) {
                            result.add(dbTable);
                            // System.out.println(dbTable.getName());
                            break;
                        }
                    }
                }
            }
        }

        return result;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup_mainOp;
    private javax.swing.JButton jButton_ok;
    private javax.swing.JComboBox<String> jComboBox_select_schema;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem_about;
    private javax.swing.JMenuItem jMenuItem_addSchema;
    private javax.swing.JMenuItem jMenuItem_addUser;
    private javax.swing.JMenuItem jMenuItem_deleteSchema;
    private javax.swing.JMenuItem jMenuItem_deleteUser;
    private javax.swing.JMenuItem jMenuItem_help;
    private javax.swing.JMenuItem jMenuItem_logout;
    private javax.swing.JMenuItem jMenuItem_refreshTables;
    private javax.swing.JMenu jMenu_info;
    private javax.swing.JMenu jMenu_refresh_tables;
    private javax.swing.JMenu jMenu_schema;
    private javax.swing.JMenu jMenu_user;
    private javax.swing.JPanel jPanel_operation;
    private javax.swing.JPanel jPanel_variablePanel;
    private javax.swing.JRadioButton jRadioButton_delete;
    private javax.swing.JRadioButton jRadioButton_insert;
    private javax.swing.JRadioButton jRadioButton_search;
    private javax.swing.JRadioButton jRadioButton_update;
    private javax.swing.JPanel op_btnsPanels;
    // End of variables declaration//GEN-END:variables
    //private javax.swing.JButton jButton_updateALL;
    private javax.swing.JButton jButton_search_Others;
    //private javax.swing.JButton jButton_deleteALL;

}
